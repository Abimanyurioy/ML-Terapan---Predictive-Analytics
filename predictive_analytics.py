# -*- coding: utf-8 -*-
"""Predictive Analytics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t_z79MKMdI_8OIWnTMOAx-x9EYwWheew

# **Predictive Analytics - Untuk Prediksi Harga Kendaraan**

## **1. Install & Import Library**
"""

# install kaggle package
!pip install -q kaggle

# Commented out IPython magic to ensure Python compatibility.

# Install library untuk proses data loading dan visualisasi data
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

# Impor library untuk data preparation
from sklearn.preprocessing import StandardScaler

# Impor library untuk split data
from sklearn.model_selection import train_test_split

# Impor metrik
from sklearn.metrics import mean_squared_error

# Impor model
from sklearn.ensemble import RandomForestRegressor

"""## **2. Data Understanding**

### 2.1 Data Loading
"""

# upload kaggle.json
from google.colab import files
files.upload()

# make directory and change permission
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!ls ~/.kaggle

!kaggle datasets download -d syedanwarafridi/vehicle-sales-data

# unzip
!mkdir content
!unzip vehicle-sales-data.zip -d content
!ls content

# Melihat isi dataset
df = pd.read_csv('content/car_prices.csv', sep=',')
df.head(2)

"""### 2.2 EDA - Deskripsi Variable

1. Year: Tahun pembuatan kendaraan (misalnya, 2015)
2. Make: Merek atau pabrikan kendaraan (misalnya Kia, BMW, Volvo)
3. Model: Model kendaraan tertentu (misalnya Sorento, Seri 3, S60, Seri 6 Gran Coupe)
4. Trim: Penunjukan tambahan untuk versi tertentu atau paket opsi model (misalnya, LX, 328i SULEV, T5, 650i)
5. Body: Jenis bodi kendaraan (misalnya SUV, Sedan)
6. Transmission: Jenis transmisi pada kendaraan (misalnya otomatis)
7. VIN : Vehicle Identification Number, kode unik yang digunakan untuk mengidentifikasi suatu kendaraan bermotor
8. State: Negara bagian di mana kendaraan berada atau didaftarkan (misalnya, CA untuk California)
9. Condition: Representasi numerik dari kondisi kendaraan (misalnya 5.0)
10. Odometer: Jarak tempuh atau jarak yang ditempuh kendaraan
11. Color: Warna eksterior kendaraan
12. Interior: Warna interior kendaraan
13. Seller: Entitas atau perusahaan yang menjual kendaraan (misalnya, Kia Motors America Inc, Financial Services Remarketing)
14. MMR: Manheim Market Report, alat penetapan harga yang digunakan dalam industri otomotif
15. Selling Price : Harga dimana kendaraan itu dijual
16. Sale Date: Tanggal dan waktu kendaraan dijual
"""

df.info()

df.isnull().sum()

df.describe()

"""### 2.3 EDA - Missing Value"""

#fill with 'Other' category
df['make'].fillna('Other', inplace=True)
df['model'].fillna('Other', inplace=True)
df['trim'].fillna('Other', inplace=True)
df['color'].fillna('Other', inplace=True)

#fill with 'Mode'
df['body'].fillna(df.body.mode()[0], inplace=True)
df['transmission'].fillna(df['transmission'].mode()[0], inplace=True)
df['interior'].fillna(df['interior'].mode()[0], inplace=True)

#remove null values
df.dropna(subset=['vin'], inplace=True)
df.dropna(subset=['saledate'], inplace=True)
df.dropna(subset=['condition'], inplace=True)
df.dropna(subset=['odometer'], inplace=True)
df.dropna(subset=['mmr'], inplace=True)

df.isnull().sum()

df.describe()

"""### 2.4 EDA - Outliers Handling"""

numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns

fig, axes = plt.subplots(nrows=len(numerical_columns), ncols=1, figsize=(10, 8))
fig.subplots_adjust(hspace=0.5)

for i, column in enumerate(numerical_columns):
    axes[i].boxplot(df[column].dropna())
    axes[i].set_title(f'Box Plot for {column}')
    axes[i].set_ylabel(column)

plt.show()

df.shape

Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR=Q3-Q1
df=df[~((df<(Q1-1.5*IQR))|(df>(Q3+1.5*IQR))).any(axis=1)]

# Cek ukuran dataset setelah kita drop outliers
df.shape

numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns

fig, axes = plt.subplots(nrows=len(numerical_columns), ncols=1, figsize=(10, 8))
fig.subplots_adjust(hspace=0.5)

for i, column in enumerate(numerical_columns):
    axes[i].boxplot(df[column].dropna())
    axes[i].set_title(f'Box Plot for {column}')
    axes[i].set_ylabel(column)

plt.show()

# drop column yang tidak dibutuhkan
df.drop(columns=['saledate'], inplace=True)
df.drop(columns=['vin'], inplace=True)
df.drop(columns=['state'], inplace=True)
df.drop(columns=['seller'], inplace=True)
df.drop(columns=['make'], inplace=True)
df.drop(columns=['model'], inplace=True)
df.drop(columns=['trim'], inplace=True)
df.drop(columns=['body'], inplace=True)

"""### 2.5 EDA - Univariate Analysis"""

numerical_features = df.select_dtypes(include=['float64', 'int64']).columns
categorical_features = df.select_dtypes(include=['object']).columns
print(numerical_features)
print(categorical_features)

"""### 2.5.1 Categorical Fitur transmission"""

feature = categorical_features[0]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
transmission = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(transmission)
count.plot(kind='bar', title=feature);

"""### 2.5.2 Categorical Fitur Color"""

feature = categorical_features[1]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
color = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(color)
count.plot(kind='bar', title=feature);

"""### 2.5.3 Categorical Fitur Interior"""

feature = categorical_features[2]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
interior = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(interior)
count.plot(kind='bar', title=feature);

"""### 2.5.8 Numerical Features"""

df.hist(bins=50, figsize=(20,15))
plt.show()

"""### 2.6 EDA - Multivariate Analysis

Categorical Features
"""

cat_features = df.select_dtypes(include=['object', 'int64']).columns.to_list()

for col in cat_features:
  sns.catplot(x=col, y="sellingprice", kind="bar", dodge=False, height = 4, aspect = 3,  data=df, palette="Set3")
  plt.title("Rata-rata 'price' Relatif terhadap - {}".format(col))

"""Numerical Features"""

# Mengamati hubungan antar fitur numerik dengan fungsi pairplot()
sns.pairplot(df, diag_kind = 'kde')

plt.figure(figsize=(10, 8))
correlation_matrix = df.corr().round(2)

# Untuk menge-print nilai di dalam kotak, gunakan parameter anot=True
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

df.drop(['year','condition','odometer'], inplace=True, axis=1)
df.head()

"""## **3. Data Preparation**

### 3.1 Encoding Fitur Kategori
"""

from sklearn.preprocessing import  OneHotEncoder
df = pd.concat([df, pd.get_dummies(df['transmission'], prefix='transmission')],axis=1)
df = pd.concat([df, pd.get_dummies(df['color'], prefix='color')],axis=1)
df = pd.concat([df, pd.get_dummies(df['interior'], prefix='interior')],axis=1)
df.drop(['transmission','color','interior'], axis=1, inplace=True)
df.head()

"""### 3.2 Train Test Split"""

from sklearn.model_selection import train_test_split

X = df.drop(["sellingprice"],axis =1)
y = df["sellingprice"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 123)

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""### 3.3 Standarisasi"""

from sklearn.preprocessing import StandardScaler

numerical_features = ['mmr']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

X_train[numerical_features].describe().round(4)

"""## **4. Model Development**"""

# Siapkan dataframe untuk analisis model
models = pd.DataFrame(index=['train_mse', 'test_mse'],
                      columns=['KNN', 'RandomForest'])

"""### 4.1 K-Nearest Neighbor"""

from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error

knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)

models.loc['train_mse','knn'] = mean_squared_error(y_pred = knn.predict(X_train), y_true=y_train)

"""### 4.2 Random Forest"""

# Impor library yang dibutuhkan
from sklearn.ensemble import RandomForestRegressor

# buat model prediksi
RF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
RF.fit(X_train, y_train)

models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

"""## **5. Evaluasi Model**"""

# Lakukan scaling terhadap fitur numerik pada X_test sehingga memiliki rata-rata=0 dan varians=1
X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

# Buat variabel mse yang isinya adalah dataframe nilai mse data train dan test pada masing-masing algoritma
mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF'])

# Buat dictionary untuk setiap algoritma yang digunakan
model_dict = {'KNN': knn, 'RF': RF}

# Hitung Mean Squared Error masing-masing algoritma pada data train dan test
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3

# Panggil mse
mse

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

prediksi = X_test.iloc[:1].copy()
pred_dict = {'y_true':y_test[:1]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)

pd.DataFrame(pred_dict)